// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Add your models here

enum RoleEnum {
  admin
  portfolio
  sub_portfolio
  property
}


model User {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  email                         String   @unique
  password                      String
  name                          String
  role                          RoleEnum
  image                         String?
  phone_number                  String?
  invited_user_id               String?  @db.ObjectId
  is_verified                   Boolean  @default(false)
  download_report               Boolean  @default(false)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  invited_user                  User?     @relation("UserInvites", fields: [invited_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  invitedUsers                  User[]    @relation("UserInvites") 
  connected_entities            ConnectedEntity[]
  otps                          Otp[]

  @@map("users")
}

model ConnectedEntity {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id                       String   @db.ObjectId
  portfolio_id                  String?
  sub_portfolio_id              String?
  property_id                   String?

  user                          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Portfolio {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  name                          String   @unique
  createdBy                     String?
  updatedBy                     String?
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}

model Property {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId                   String?  @db.ObjectId
  subPortfolioId                String?
  name                          String
  expediaId                     Int?
  expediaStatus                 String?
  bookingId                     Int?
  bookingStatus                 String?
  agodaId                       Int?
  agodaStatus                   String?
  credentialsId                 String?  @db.ObjectId
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  
  credentials                   PropertyCredentials? @relation(fields: [credentialsId], references: [id])

  @@map("properties")
}

model PropertyCredentials {
  id                           String   @id @default(auto()) @map("_id") @db.ObjectId
  expediaUsername              String?
  expediaPassword              String?
  agodaUsername                String?
  agodaPassword                String?
  bookingUsername              String?
  bookingPassword              String?
  expediaEmailAssociated       String?
  propertyContactEmail         String?
  portfolioContactEmail        String?
  multiplePortfolioEmails      String[]

  properties                   Property[]

  @@map("property_credentials")
}

model Otp {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id                       String   @db.ObjectId
  otp_code                      String
  expires_at                    DateTime
  is_used                      Boolean  @default(false)
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt

  user                          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([otp_code])
}