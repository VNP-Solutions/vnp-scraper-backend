// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Add your models here

enum RoleEnum {
  admin
  portfolio
  sub_portfolio
  property
}

enum JobStatus {
  Pending
  Running
  Completed
  Partial
  Failed
}

enum PostingType {
  OTA
  OTA_PLUS
}

enum OTAProvider {
  Expedia
  Booking
  Agoda
}

model User {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  email                         String   @unique
  password                      String
  name                          String
  role                          RoleEnum
  image                         String?
  phone_number                  String?
  invited_user_id               String?  @db.ObjectId
  is_verified                   Boolean  @default(false)
  download_report               Boolean  @default(false)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  invited_user                  User?     @relation("UserInvites", fields: [invited_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  invitedUsers                  User[]    @relation("UserInvites") 
  connected_entities            ConnectedEntity[]
  otps                          Otp[]
  jobs                          Job[]
  userFeatureAccessPermissions  UserFeatureAccessPermission[]

  @@map("users")
}

model ConnectedEntity {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id                       String   @db.ObjectId
  portfolio_id                  String?
  sub_portfolio_id              String?
  property_id                   String?

  user                          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Portfolio {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  name                          String   @unique
  createdBy                     String?
  updatedBy                     String?
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  sub_portfolios                SubPortfolio[]
  jobs                          Job[]
  userFeatureAccessPermissions  UserFeatureAccessPermission[]
}

model SubPortfolio {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  name                          String   @unique
  description                   String?
  portfolio_id                  String   @db.ObjectId
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  portfolio                     Portfolio? @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)

  jobs                          Job[]
  userFeatureAccessPermissions  UserFeatureAccessPermission[]
}

model Job {
  id                            String      @id @default(auto()) @map("_id") @db.ObjectId
  job_status                    JobStatus   @default(Pending)
  portfolio_id                  String?     @db.ObjectId
  sub_portfolio_id              String?     @db.ObjectId
  property_id                   String?     @db.ObjectId
  user_id                       String      @db.ObjectId
  posting_type                  PostingType
  portfolio_name                String
  sub_portfolio_name            String
  property_name                 String
  billing_type                  String
  next_due_date                 DateTime
  ota_provider                  OTAProvider @map("OTA")
  remaining_direct_billed       Float
  total_collectable             Float
  total_amount_confirmed        Float
  execution_type                String      
  retries_attempted             Int         @default(0)
  max_retries                   Int         @default(3)
  retry_delay_ms                Int?
  priority                      Int         @default(0)
  job_backoff_length            Int         
  queue_name                    String?
  worker_assigned               String?
  batch_execution_id            String?
  createdAt                     DateTime    @default(now())
  updatedAt                     DateTime    @updatedAt

  portfolio                     Portfolio?  @relation(fields: [portfolio_id], references: [id])
  subPortfolio                  SubPortfolio? @relation(fields: [sub_portfolio_id], references: [id])
  property                      Property?   @relation(fields: [property_id], references: [id])
  user                          User?       @relation(fields: [user_id], references: [id])

  @@map("jobs")
}

model Property {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId                   String?  @db.ObjectId
  subPortfolioId                String?
  name                          String
  expediaId                     Int?
  expediaStatus                 String?
  bookingId                     Int?
  bookingStatus                 String?
  agodaId                       Int?
  agodaStatus                   String?
  credentialsId                 String?  @db.ObjectId
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  
  credentials                   PropertyCredentials? @relation(fields: [credentialsId], references: [id])

  jobs                          Job[]
  files                         File[]
  userFeatureAccessPermissions  UserFeatureAccessPermission[]

  @@map("properties")
}

model PropertyCredentials {
  id                           String   @id @default(auto()) @map("_id") @db.ObjectId
  expediaUsername              String?
  expediaPassword              String?
  agodaUsername                String?
  agodaPassword                String?
  bookingUsername              String?
  bookingPassword              String?
  expediaEmailAssociated       String?
  propertyContactEmail         String?
  portfolioContactEmail        String?
  multiplePortfolioEmails      String[]

  properties                   Property[]

  @@map("property_credentials")
}

model Otp {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id                       String   @db.ObjectId
  otp_code                      String
  expires_at                    DateTime
  is_used                      Boolean  @default(false)
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt

  user                          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([otp_code])
}


model File {
  id                           String   @id @default(auto()) @map("_id") @db.ObjectId
  url                          String
  thumbnile_url                String?
  originalName                 String
  size                         Int
  property_id                  String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  property                     Property? @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@map("files")
}

model UserFeatureAccessPermission {
  id                           String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id                      String   @db.ObjectId
  portfolio_id                 String?  @db.ObjectId
  sub_portfolio_id             String?  @db.ObjectId
  property_id                  String?  @db.ObjectId

  user                         User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  portfolio                    Portfolio?    @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)
  subPortFolio                 SubPortfolio? @relation(fields: [sub_portfolio_id], references: [id], onDelete: Cascade)
  property                     Property?     @relation(fields: [property_id], references: [id], onDelete: Cascade)
}
